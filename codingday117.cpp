/*Zigzag Conversion
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"
Write the code that will take a string and make this conversion given a number of rows:
string convert(string s, int numRows);
Example 1:
Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:
Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I
Example 3:
Input: s = "A", numRows = 1
Output: "A"*/
class Solution {
public:
    string convert(string s, int numRows) {
       int i=0;
  int count=1;
  vector<pair<int,char>>temp;
  if(numRows==1) return s;
  while(i<s.size()){
    if(i<s.size()&&count==1){
      while(i<s.size()&&count<=numRows){
        temp.push_back({count,s[i]});
        i++;
        count++;
      }
      count=numRows-1;
    }
    else{
       while(i<s.size()&&count>1){
         temp.push_back({count,s[i]});
        i++;
        count--;
       }
      }
  }

  string res="";
 int c=1;
 while(c<=numRows){
    for(auto i:temp){
        if(i.first==c){
        res+=i.second;
        }
    }
    c++;
 }
  return res;

    }
};
/* Find the Difference
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.
Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:
Input: s = "", t = "y"
Output: "y"*/
class Solution {
public:
    char findTheDifference(string s, string t) {
      unordered_map<char,int>mp;
      for(auto i:s){
        mp[i]++;
      }  
      int i=0;
      char c;
      while(i<t.size()){
        if(mp.find(t[i])==mp.end() or mp[t[i]]==0){
            c=t[i];
            break;
        }
        mp[t[i]]--;
        i++;
      }
      return c;
    }
};
/*Find All Numbers Disappeared in an Array
Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.
Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:
Input: nums = [1,1]
Output: [2]
 */
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
     unordered_set<int> check;
     for(auto i:nums){
        check.insert(i);
     }  
     vector<int>res;
     for(int i=1;i<=nums.size();i++){
        if(check.find(i)==check.end()){
            res.push_back(i);
        }
     }
     return res;
    }
};
/* Maximum Number of Words You Can Type
There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.
Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.
Example 1:
Input: text = "hello world", brokenLetters = "ad"
Output: 1
Explanation: We cannot type "world" because the 'd' key is broken.
Example 2:
Input: text = "leet code", brokenLetters = "lt"
Output: 1
Explanation: We cannot type "leet" because the 'l' and 't' keys are broken.
Example 3:
Input: text = "leet code", brokenLetters = "e"
Output: 0
Explanation: We cannot type either word because the 'e' key is broken.*/
class Solution {
    bool check(string s, unordered_set<char>st){
        for(auto i:s){
            if(st.find(i)!=st.end()) return false;
        }
        return true;
    }
public:
    int canBeTypedWords(string text, string brokenLetters) {
        unordered_set<char>st;
        for(auto i:brokenLetters){
            st.insert(i);
        }
        string temp="";
        int count=0;
        for(int i=0;i<text.size();i++){
        if(text[i]==' '){
          if(check(temp,st)){
            count++;
          } 
          temp=""; 
        }
        else{
            temp+=text[i];
        }
        }
      if(check(temp,st)){
            count++;
          } 
          return count;
    }
};
