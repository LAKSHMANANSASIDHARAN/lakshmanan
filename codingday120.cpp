/*Duplicate Zeros
Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.
Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.
Example 1:
Input: arr = [1,0,2,3,0,4,5,0]
Output: [1,0,0,2,3,0,0,4]
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]
Example 2:
Input: arr = [1,2,3]
Output: [1,2,3]
Explanation: After calling your function, the input array is modified to: [1,2,3]*/
class Solution {
public:
    void duplicateZeros(vector<int>& arr) {
        vector<int>ans(arr.size(),0);
        int i=0,j=0;
        while(j<arr.size()){
            if(arr[i]==0){
                j+=2;
                i++;
            }
            else{
                ans[j]=arr[i];
                i++;
                j++;
            }
        }
        arr=ans;
        
    }
};
/*Remove Palindromic Subsequences
You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.
A string is called palindrome if is one that reads the same backward as well as forward.
Example 1:
Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".*/
class Solution {
public:
    int removePalindromeSub(string s) {
        int l=0,r=s.size()-1;
        while(l<=r){
            if(s[l]!=s[r]) return 2;
            l++;r--; 
        }
        return 1;
    }
};
